Token		Lexeme
------------------------------
Keyword		int
Separator	,
Identifier	i
Separator	;
Identifier	n
Keyword		float
Separator	[
Separator	]
Separator	;
Identifier	arr
Integer		100
Keyword		cout
Operator	<
Operator	<
Identifier	Enter
Identifier	total
Identifier	number
Identifier	of
Separator	(
Identifier	elements
Integer		1
Identifier	to
Separator	)
Integer		100
Separator	;
Keyword		cin
Operator	>
Operator	>
Separator	;
Identifier	n
Keyword		cout
Operator	<
Operator	<
Separator	;
Identifier	endl
Operator	/
Operator	/
Identifier	Store
Identifier	number
Identifier	entered
Identifier	by
Identifier	the
Identifier	user
Separator	(
Identifier	fori
Operator	=
Separator	;
Integer		0
Identifier	i
Operator	<
Separator	;
Identifier	n
Operator	+
Operator	+
Separator	)
Identifier	i
Separator	{
Keyword		cout
Operator	<
Operator	<
Identifier	Enter
Identifier	Number
Operator	<
Operator	<
Identifier	i
Operator	+
Integer		1
Operator	<
Operator	<
Separator	;
Keyword		cin
Operator	>
Operator	>
Separator	[
Separator	]
Separator	;
Identifier	arri
Separator	}
Operator	/
Operator	/
Identifier	Loop
Identifier	to
Identifier	store
Identifier	largest
Identifier	number
Identifier	to
Separator	[
Separator	]
Identifier	arr
Integer		0
Separator	(
Identifier	fori
Operator	=
Separator	;
Identifier	i
Integer		1
Operator	<
Separator	;
Identifier	n
Operator	+
Operator	+
Separator	)
Identifier	i
Separator	{
Operator	/
Operator	/
Identifier	Change
Operator	<
Identifier	to
Operator	>
Keyword		if
Identifier	you
Identifier	want
Identifier	to
Identifier	find
Identifier	the
Identifier	smallest
Identifier	element
Separator	(
Separator	[
Separator	]
Identifier	ifarr
Integer		0
Operator	<
Separator	[
Separator	]
Separator	)
Identifier	arri
Separator	[
Separator	]
Identifier	arr
Integer		0
Operator	=
Separator	[
Separator	]
Separator	;
Identifier	arri
Separator	}
Keyword		cout
Operator	<
Operator	<
Identifier	Largest
Identifier	element
Operator	=
Operator	<
Operator	<
Separator	[
Separator	]
Separator	;
Identifier	arr
Integer		0
Keyword		return
Separator	;
